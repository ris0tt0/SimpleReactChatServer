{"version":3,"sources":["components/jaychat.js","util/index.js","api/chatapi.js","selectors/index.js","App.js","actions/actiontypes.js","actions/index.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["JayChatLogItem","line","color","className","style","background","JayChat","chatLog","onLine","onAvatar","useState","setLine","log","map","rawline","index","slice","copy","parseLine","key","type","value","onChange","e","target","onKeyUp","keyCode","trim","length","hex","socket","io","totalChatLogSelector","createSelector","state","chatlog","concat","reverse","colorValueSelector","name","JayChatContainer","dispatch","useDispatch","useSelector","message","getState","emit","payload","App","Boolean","window","location","hostname","match","rootReducers","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","Logger","useDefaults","on","msg","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.be94cd3f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SliderPicker } from 'react-color'\n\nimport './jaychat.css';\nimport { parseLine } from '../util';\nimport Logger from 'js-logger';\n\nconst JayChatLogItem = ({line,color}) => (\n\t<div className='jaychatlogitem'>\n\t\t<div style={{background:color}} />\n\t\t<p>{line}</p>\n\t</div>\n);\nfunction JayChat({chatLog,onLine,onAvatar,color}) {\n\n\tconst [line,setLine] = useState('');\n\n\tconst onKeyCode = e => {\n\t\tif(e.keyCode === 13 && line.trim().length > 0){\n\t\t\tonLine(line);\n\t\t\tsetLine('');\n\t\t}\n\t};\n\n\tconst log = chatLog.map((rawline,index) =>{\n\t\t//TODO: move out of components and put into selectors\n\t\tconst {color,copy} = parseLine(rawline);\n\n\t\treturn (\n\t\t\t<JayChatLogItem key={`_${index}`} color={color} line={copy} />\n\t\t)\n\t})\n\n\treturn (\n\t\t<div className='jaychat-container'>\n\t\t\t<div className='jaychat-log'>\n\t\t\t\t{log}\n\t\t\t</div>\n\t\t\t<div style={{background:color}} className='jaychat-control'>\n\t\t\t\t<input type='text' value={line} onChange={e=>setLine(e.target.value)} onKeyUp={onKeyCode} />\n\t\t\t</div>\n\t\t\t<div className='jaychat-color'>\n\t\t\t\t<SliderPicker color={color} onChange={({hex}) => onAvatar(hex)} />\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nJayChat.propTypes = {\n\n}\n\nexport default JayChat\n\n","import Logger from \"js-logger\";\n\n/**\n * Returns an object that contains the color and copy text.\n * \n * @param {string} line raw line from the server.\n */\nexport const parseLine = line => \n\t({\n\t\tcolor:line.slice(0,7),\n\t\tcopy:line.slice(7)\n\t})","import { COMPLETE_MESSAGE, SENDING_MESSAGE, ERROR_MESSAGE } from \"../actions/actiontypes\";\nimport io from \"socket.io-client\";\nimport Logger from \"js-logger\";\n\nconst socket = io();\n\nexport const sendingMessage = () => ({type:SENDING_MESSAGE});\nexport const completeMessage = () => ({type:COMPLETE_MESSAGE});\nexport const errorMessage = payload => ({type:ERROR_MESSAGE,payload});\n\nexport const sendMessage = message => (dispatch,getState) => {\n\tconst state = getState();\n\n\tdispatch(sendingMessage());\n\ttry{\n\t\tsocket.emit('message',`${state.name} ${message}`);\n\t\tdispatch(completeMessage());\n\t}catch(e){\n\t\tdispatch(errorMessage(e));\n\t}\n}\n","import { createSelector } from \"reselect\";\n\nconst chatlogSelector = state => state.chatlog;\nconst nameSelector = state => state.name;\n\nexport const totalChatLogSelector = createSelector(chatlogSelector,chatlog => chatlog.concat().reverse());\nexport const colorValueSelector = createSelector(nameSelector,name => name);","import React from 'react';\nimport './App.css';\nimport JayChat from './components/jaychat';\nimport Logger from 'js-logger';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { sendMessage } from './api/chatapi';\nimport { totalChatLogSelector, colorValueSelector } from './selectors';\nimport { setName } from './actions';\n\nconst JayChatContainer = () => {\n  const dispatch = useDispatch();\n  const online = line => dispatch(sendMessage(line));\n  const onColor = color => dispatch(setName(color));\n  const log = useSelector(totalChatLogSelector);\n  const color = useSelector(colorValueSelector);\n\n  return <JayChat color={color} onLine={online} chatLog={log} onAvatar={onColor} />\n}\n\nconst App = () => (\n  <div className=\"App\">\n    <JayChatContainer />\n  </div>\n);\n\nexport default App;\n","export const SET_NAME = 'set name';\nexport const SENDING_MESSAGE = 'send message';\nexport const COMPLETE_MESSAGE = 'complete message';\nexport const ERROR_MESSAGE = 'error message';\nexport const UPDATE_CHAT_LOG = 'update chat log';","import { UPDATE_CHAT_LOG, SET_NAME } from \"./actiontypes\";\n\nexport const setName = payload => ({type:SET_NAME,payload});\nexport const updateChatLog = payload => ({type:UPDATE_CHAT_LOG,payload});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { UPDATE_CHAT_LOG, SET_NAME } from \"../actions/actiontypes\";\nimport Logger from \"js-logger\";\n\nfunction name(state='#40b2bf',action){\n\t\n\tswitch (action.type) {\n\t\tcase SET_NAME:\n\t\t\treturn action.payload;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nfunction chatlog(state=[],action){\n\t\n\tswitch(action.type){\n\t\tcase UPDATE_CHAT_LOG:\n\t\t\treturn [...state,action.payload];\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n\nconst rootReducers = combineReducers({\n\tchatlog,\n\tname,\n})\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducers from \"../reducers\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducers,composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Logger from 'js-logger';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport io from \"socket.io-client\";\nimport { updateChatLog } from './actions';\n\nLogger.useDefaults();\n\nconst socket = io();\n\n// listen for server events and dispatch.\nsocket.on('onchatlog', ({msg}) => store.dispatch(updateChatLog(msg)));\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}> <App /></Provider>\n  </React.StrictMode>,\n  document.getElementById('jonathan-r-gee')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}